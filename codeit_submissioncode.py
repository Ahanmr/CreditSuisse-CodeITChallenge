# -*- coding: utf-8 -*-
"""codeit_submissioncode

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15WrbgZQY3MCyuyGuela7ikbieXFXHkK-
"""

# -*- coding: utf-8 -*-

# Imports
import math

import numpy as np
import pandas as pd
import scipy.stats

# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('ggplot')
import seaborn as sns

from google.colab import drive
drive.mount('/content/gdrive')

ls

# Let's get some data
train = pd.read_csv('/content/gdrive/My Drive/train.csv')
test = pd.read_csv('/content/gdrive/My Drive/test.csv')

train=train.iloc[:400000,:]

import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt # plotting library
import missingno as msno # plotting missing data
import seaborn as sns # plotting library
from sklearn.model_selection import train_test_split,cross_val_score, cross_val_predict
from sklearn import metrics
from sklearn.preprocessing import Imputer #for handling missing data
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

dataset=train

#setup  Matplotlib (magic function) . Plots will render within the notebook itself
# %matplotlib inline  
dataset.hist(bins = 50 , figsize = (20,20))
plt.show()

X = dataset.iloc[:,0:-1]
y = dataset.iloc[:,-1] #Dependant Varible
X.head() #show first 5 records

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2 , random_state = 0)

# rf_regressor = RandomForestRegressor(n_estimators = 300 ,  random_state = 0)
# rf_regressor.fit(X_train,y_train)

# #Predicting the SalePrices using test set 
# y_pred_rf = rf_regressor.predict(X_test)

# #Random Forest Regression Accuracy with test set
# print('Random Forest Regression Accuracy: ', rf_regressor.score(X_test,y_test))

from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

# scaler = StandardScaler().fit(X_train)
# rescaled_X_train = scaler.transform(X_train)
model = GradientBoostingRegressor(random_state=21, n_estimators=400)
model.fit(X_train, y_train)

# transform the validation dataset
# rescaled_X_test = scaler.transform(X_test)
predictions = model.predict(X_test)
print (mean_squared_error(y_test, predictions))

# scaler = StandardScaler().fit(test)
# rescaled_X_train = scaler.transform(test)
# model = GradientBoostingRegressor(random_state=21, n_estimators=400)
# model.fit(rescaled_X_train, y_train)

# transform the validation dataset
test = pd.read_csv('/content/gdrive/My Drive/test.csv')
test=test.iloc[:,2:]
# rescaled_X_test1 = scaler.transform(test)
predictions = model.predict(test)
# print (mean_squared_error(y_test, predictions))

predictions
y_pred3=list(predictions)
len(y_pred3)

df_test2=list(test['soldierId'].astype(int))
len(df_test2)

final = pd.DataFrame({'soldierId': df_test2,'bestSoldierPerc': y_pred3})

final.to_csv('codeit4.csv')

rf_regressor = RandomForestRegressor(n_estimators = 300 ,  random_state = 0)
rf_regressor.fit(X_train,y_train)

#Predicting the SalePrices using test set 
y_pred_rf = rf_regressor.predict(X_test)

#Random Forest Regression Accuracy with test set
print('Random Forest Regression Accuracy: ', rf_regressor.score(X_test,y_test))

print (mean_squared_error(y_test, y_pred_rf))